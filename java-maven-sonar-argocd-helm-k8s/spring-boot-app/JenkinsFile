pipeline {
  agent {
    docker {
      image 'ubuntu:22.04' // Start from a base image
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }

  environment {
    SONAR_URL = "http://54.90.182.101:9000"
    DOCKER_IMAGE = "akshaysaji1/ultimate-cicd:${BUILD_NUMBER}"
    GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
    GIT_USER_NAME = "akshaysaji1"
  }

  stages {
    stage('Setup Environment') {
      steps {
        sh '''
          apt update
          apt install -y wget gnupg curl git unzip apt-transport-https ca-certificates lsb-release software-properties-common

          # Install Java 17
          wget -qO- https://packages.adoptium.net/artifactory/api/gpg/key/public | gpg --dearmor -o /etc/apt/trusted.gpg.d/adoptium.gpg
          echo "deb https://packages.adoptium.net/artifactory/deb $(lsb_release -cs) main" > /etc/apt/sources.list.d/adoptium.list
          apt update
          apt install -y temurin-17-jdk

          # Install Maven
          apt install -y maven

          # Install Docker CLI
          apt install -y docker.io

          # Confirm installations
          java -version
          mvn -version
          docker --version
        '''
      }
    }

    stage('Checkout') {
      steps {
        checkout scm
        sh 'echo Checkout completed.'
      }
    }

    stage('Build and Test') {
      steps {
        sh '''
          cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
          mvn clean package
        '''
      }
    }

    stage('Static Code Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh '''
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            mvn sonar:sonar \
              -Dsonar.login=$SONAR_AUTH_TOKEN \
              -Dsonar.host.url=$SONAR_URL
          '''
        }
      }
    }

    stage('Build and Push Docker Image') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'docker-cred', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
          sh '''
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
            docker build -t $DOCKER_IMAGE .
            docker push $DOCKER_IMAGE
          '''
        }
      }
    }

    stage('Update Deployment File') {
  steps {
    withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
      sh '''
        cd java-maven-sonar-argocd-helm-k8s
        git config user.email "akshaysaji04@gmail.com"
        git config user.name "Akshay Saji"
        
        sed -i "s|replaceImageTag|11|g" spring-boot-app-manifests/deployment.yml

        git add spring-boot-app-manifests/deployment.yml
        git commit -m "Update deployment image to version 11"
        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
      '''
    }
  }
}

  }
}
